* 目录                                                                  :TOC:
- [[#supporting-functions-for-281-and-282-exercises][Supporting functions for 2.81 and 2.82 exercises]]
- [[#cons-stream实现][cons-stream实现]]
- [[#exercise-370-merge-weighted-实现的注意事项][Exercise 3.70 merge-weighted 实现的注意事项]]
- [[#377和378循环定义问题][3.77和3.78循环定义问题]]
- [[#表格测试][表格测试]]

* Supporting functions for 2.81 and 2.82 exercises
  #+begin_src scheme
    ;;supporting function for type cierctions
    (require "ch2support.scm") ;codes comes along with text book, which define table and assotiated operations
    (require "chap2_real.rkt") ;exercises for real number part of SICP, which provides rational and polar packages. This file can be found in my private Git repository "SICP"

    (define *coercion-table* (make-table))

    (define (put-coercion type1 type2 proc)
      ((*coercion-table* 'insert-proc!) type1 type2 proc))

    (define (get-coercion type1 type2)
      ((*coercion-table* 'lookup-proc) type1 type2))

    (define (install-coercion-package)
      (define (scheme-number->complex n)
        (make-complex-from-real-imag (contents n) 0))
      (define (scheme-number->rational n)
        (make-rational (contents n) 1))
      (put-coercion 'scheme-number 'rational scheme-number->rational)
      (put-coercion 'scheme-number 'complex scheme-number->complex)
      'done)

    (install-coercion-package)
    (install-complex-package)
    (install-scheme-number-package)
    (install-rational-package)
    (install-rectangular-package)
    (install-polar-package)
  #+end_src
* cons-stream实现
  cons-stream needs to be a macro in order to work correctly. Otherwise the invocation of cons-stream will evaluate all its arguments eagerly.

  #+begin_src scheme
    ;;define cons-stream as function
    (define (cons-stream a b) (cons a (mem-proc (lambda () b))))

    ;;define cons-stream as macro
    (define-syntax cons-stream
      (syntax-rules ()
        ((cons-stream a b)
         (cons a (memo-func (lambda () b))))))
  #+end_src
* Exercise 3.70 merge-weighted 实现的注意事项
  在权重相等时需要把相等权重的pair都加到结果stream中
  #+begin_src scheme
    (define (merge-weighted s1 s2 weight)
      (cond ((stream-null? s1) s2)
            ((stream-null? s2) s1)
            (else
             (let ((s1car (stream-car s1))
                   (s2car (stream-car s2)))
               (cond ((< (weight s1car) (weight s2car))
                      (cons-stream
                       s1car
                       (merge-weighted (stream-cdr s1) s2 weight)))
                     ((> (weight s1car) (weight s2car))
                      (cons-stream
                       s2car
                       (merge-weighted s1 (stream-cdr s2) weight)))
                     (else
                      (cons-stream
                       s1car
                       (merge-weighted (stream-cdr s1) s2 weight)))))))) ;; should include (stream-car s2)
  #+end_src
* 3.77和3.78循环定义问题
  可以把值定义，改为无参数函数定义，但性能很差。另，letrec 似乎也不支持循环值定义（R5）
  #+begin_src scheme
    (define (solve f y0 dt)
      (define (y) (integral-delayed (delayed (dy)) y0 dt))
      (define (dy) (stream-mapping f (y)))
      (y))
  #+end_src

  在Haskell中，由于lazy evaluation的缘故，似乎实现起来更自然，性能也好：
  #+begin_src haskell
    solve f y0 dt = y
        where y = integralDelayed dy y0 dt
              dy = map f y
  #+end_src
* 表格测试
  | a        | b | c |
  | 测试一下 | 英文对其 |   |
