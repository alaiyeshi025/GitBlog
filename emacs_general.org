* 异步执行
  #+begin_src emacs-lisp
    (async-start-process NAME PROCESS FINISH-FUNC) ;;FINISH-FUNC 为回调函数 Emacs version 26.3
  #+end_src
* Installation in Linux
** configure
   - sudo apt install libgtk2.0-dev
   - sudo apt install libxpm-dev
   - sudo apt install libjpeg62-dev
   - sudo apt install libgif-dev
   - sudo apt install libtiff5-dev
   - sudo apt install gnutls-dev
   - sudo apt install libncurses-dev
   - sudo apt install mailutils
   - sudo apt install libxml2-dev
   - ./configure --with-mailutils --with-modules
** 作为 service 启动
   #+begin_quote
   Systemd is the supported method of running applications at startup on most Linux distributions. The following configuration file emacs.service will be included in the standard Emacs installation as of 26.1. All you need to do is copy this to ~/.config/systemd/user/emacs.service .

   [Unit]

   Description=Emacs text editor

   Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

   [Service]

   Type=forking

   ExecStart=/usr/local/bin/emacs --daemon

   ExecStop=/usr/local/bin/emacsclient --eval "(kill-emacs)"

   Environment=SSH_AUTH_SOCK=%t/keyring/ssh

   Restart=on-failure

   [Install]

   WantedBy=default.target

   Enable the unit by running:

   systemctl enable --user emacs

   systemctl start --user emacs

   -- from EmacsWiki
   #+end_quote
* Helm 补全当前条目
  C-j 这样可以避免中文名输入的麻烦，以及有的时候（例如treemacs）会混淆文件和文件夹了。
* EAF 在 vnc4server 中有问题
  vnc4server 似乎对 Xorg 支持不好，运行不起来。改为 TigerVNC 后，问题解决……
* Emacs输入utf8特殊字符快捷键
  C-x 8 RET,Helm可补全字符名等
* 去除 buffer 中各种 whitespace 问题
  M-x whitespace-cleanup
  whitespace 的自动清理会和 auto-save 冲突，且 cleanup 动作不需要频繁进行。故手动执行。
* Emacs dashboard同treemacs整合
  Treemacs的know projects cache文件和projectile不同，而dashboard默认是读projectile的。因而增加相关hook：
  #+begin_src emacs-lisp
    (add-hook 'treemacs-create-project-functions
              #'(lambda (project) (projectile-add-known-project (treemacs-project->path project))))

    (add-hook 'treemacs-delete-project-functions
              #'(lambda (project)
                  (interactive "x") ;;由于projectile-remove-known-project必须interactively called，project是一个struct类型，故code letter用"x"。另，treemacs-project->path 返回的path路径没有用缩写，最后也不带"/"，故需要转换。
                  (projectile-remove-known-project
                   (file-name-as-directory (abbreviate-file-name (treemacs-project->path project))))))
  #+end_src
* Emacs dashboard的project不显示所有projectile-bookmarks.eld中的项目
  #+begin_src emacs-lisp
    (setq projectile-current-project-on-switch 'keep)
  #+end_src
* Emacs dashboard加入Gnus新邮件列表
  #+begin_src emacs-lisp
    (defun dashboard-insert-gnus (list-size)
      (let ((group-article (get-new-mail)))
        (dashboard-insert-section
         "New Mails"
         group-article
         list-size
         "r"
         `(lambda (&rest ignore)
            (gnus-fetch-group (car ',el) (list (cadr ',el))))
         (format "[%s] %s - %s" (car el) (caddr el) (cadddr el)))))

    (add-to-list 'dashboard-item-generators  '(gnus . dashboard-insert-gnus))
    (add-to-list 'dashboard-items '(gnus) t)
  #+end_src
* 使用prefix argument实现多个color-rg方法的选择
  从ace-jump里面学到的:)
  #+begin_src emacs-lisp
    (defvar color-rg-input-submode-list
      '(color-rg-search-input-in-current-file
        color-rg-search-input
        color-rg-search-input-in-project))

    (defvar color-rg-symbol-submode-list
      '(color-rg-search-symbol-in-current-file
        color-rg-search-symbol
        color-rg-search-symbol-in-project))

    (defun color-rg-input-choose (&optional prefix)
      (interactive "p")
      (let ((index (/ prefix 4))
            (submode-list-length (length color-rg-input-submode-list)))
        (if (< index 0)
            (error "[color-rg] Invalid prefix command"))
        (if (>= index submode-list-length)
            (setq index (1- submode-list-length)))
        (call-interactively (nth index color-rg-input-submode-list))))

    (defun color-rg-symbol-choose (&optional prefix)
      (interactive "p")
      (let ((index (/ prefix 4))
            (submode-list-length (length color-rg-symbol-submode-list)))
        (if (< index 0)
            (error "[color-rg] Invalid prefix command"))
        (if (>= index submode-list-length)
            (setq index (1- submode-list-length)))
        (call-interactively (nth index color-rg-symbol-submode-list))))

    (global-set-key (kbd "C-c C-s") 'color-rg-symbol-choose)
    (global-set-key (kbd "C-s") 'color-rg-input-choose)
  #+end_src
* Dired批量文件处理
  dired-toggle-read-only 可以将dired buffer转换为可编辑模式，这样的话，dired列出的文件名就可以当做文本来操作了，一些场景如批量重命名等就很方便的可以实现
* Org mode表格对齐问题
  两种方案：
  1. cnfonts, 通过修改和适配英文字体高度和中文字体高度，使得中文宽度为英文的两倍。缺点在于中文字体的高度会高于英文字体。
  2. 更纱黑体。这个字体是中文英文等高且宽度比例2:1的。缺点是英文字体看起来不如Dejavu Sans Mono等“舒展”。字体名“等距更纱黑体 SC”。
* NOX 中关闭Haskell Ide Engine 的 completionSnippetsOn
  #+begin_src emacs-lisp
    (add-to-list 'nox-server-programs '((haskell-mode) . (nox-hie "hie-wrapper" "--lsp")))

    (defclass nox-hie (nox-lsp-server) () :documentation "A custom class for HIE.")

    (cl-defmethod nox-initialization-options ((server nox-hie))
      (list :languageServerHaskell (list :completionSnippetsOn :json-false)))
  #+end_src
  HIE默认是开启的，这样的话，每次在做自定义函数名补全的时候，都会带上Snippets place holder。非常烦人。如：
  #+begin_src haskell
    oddPlusOne :: Odd n -> Even (S n)
    oddPlusOne ${1:Odd n} --当补全oddPlusOne时，后面的占位符就会出来
  #+end_src
* 避免Geiser hang
  #+begin_quote
  It is possible for Geiser to hang your Emacs process when trying to complete symbols. This can happen in the REPL itself or even in a Scheme buffer that is attached to the REPL process. If this happens, you've probably entered a module that changes the REPL prompt from what Geiser was expecting to see.

  Unfortunately, there's no general solution for this issue right now (as it is a daunting task to try to make a regexp that can encompass all possible REPL prompts). The best solution for now is to fix this issue on a case-by-case basis by adjusting your prompt regexp variable so that it matches the default prompt as well as your Scheme module's special prompt.
  #+end_quote
  #+begin_src emacs-lisp
    (eval-after-load 'geiser-chez
      '(progn
         (setq geiser-active-implementations '(chez))
         (setq geiser-chez--prompt-regexp "debug> \\|> \\|.*: ")))
  #+end_src
* Options                                                          :noexport:
  #+title: Emacs General
